<div id="home">
    <div class="container-fluid">
        <div class="row d-flex justify-content-center align-self-center">
            <div class="col-sm-6 col-md-2 rounded-3 ms-4 me-4 d-flex justify-content-between align-items-center">
                <div class="card card-margin flex-grow-1">
                    <div class="card-body d-flex flex-column justify-content-center align-items-center">
                        <div class="label">Nº Resposta Total</div>
                        <div id="counter1" class="card-content">0</div>
                        <div class="divider"></div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-md-2 rounded-3 ms-4 me-4 d-flex justify-content-between align-items-center">
                <div class="card card-margin flex-grow-1">
                    <div class="card-body d-flex flex-column justify-content-center align-items-center">
                        <div class="label">Nº Resposta último mês</div>
                        <div id="counter2" class="card-content">0</div>
                        <div class="divider"></div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-md-2 rounded-3 ms-4 me-4 d-flex justify-content-between align-items-center">
                <div class="card card-margin flex-grow-1">
                    <div class="card-body d-flex flex-column justify-content-center align-items-center">
                        <div class="label">Nº Resposta mês atual</div>
                        <div id="counter3" class="card-content">0</div>
                        <div class="divider"></div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-md-2 rounded-3 ms-4 me-4 d-flex justify-content-between align-items-center">
                <div class="card card-margin flex-grow-1">
                    <div class="card-body d-flex flex-column justify-content-center align-items-center">
                        <div class="label">Nº Resposta p/ perfil</div>
                        <div class="row w-100">
                            <div class="col-md-3 d-flex flex-column mb-3 justify-content-center align-items-center">
                                <div class="label">Perfil 1</div>
                                <div id="profile-counter1" class="card-content">0</div>
                                <div class="divider"></div>
                            </div>
                            <div class="col-md-3 d-flex flex-column mb-3 justify-content-center align-items-center">
                                <div class="label">Perfil 2</div>
                                <div id="profile-counter2" class="card-content">0</div>
                                <div class="divider"></div>
                            </div>
                            <div class="col-md-3 d-flex flex-column mb-3 justify-content-center align-items-center">
                                <div class="label">Perfil 3</div>
                                <div id="profile-counter3" class="card-content">0</div>
                                <div class="divider"></div>
                            </div>
                            <div class="col-md-3 d-flex flex-column mb-3 justify-content-center align-items-center">
                                <div class="label">Perfil 4</div>
                                <div id="profile-counter4" class="card-content">0</div>
                                <div class="divider"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>  
        </div>  
        <div class="row justify-content-center align-self-center">
            <div class="col-sm-12 p-4 rounded-3 ms-4 me-4 d-flex flex-column justify-content-center align-center">
                <div class="card card-margin">
                    <div class="card-header no-border">
                        <h5 class="card-title">Dados de resposta</h5>
                    </div>
                    <div class="card-body pt-0">
                        <form class="mb-2">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label for="filter-question">Pergunta</label>
                                        <select class="form-control" id="filter-question">
                                            <option value="">Selecione a Pergunta</option>
                                            <!-- Perguntas serão carregadas dinamicamente aqui -->
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label for="filter-date-from">De</label>
                                        <input type="date" class="form-control" id="filter-date-from">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label for="filter-date-to">Até</label>
                                        <input type="date" class="form-control" id="filter-date-to">
                                    </div>
                                </div>
                            </div>
                            <div class="row"> 
                                <div id="opa" class="col-md-12 mt-4">
                                    <div class="form-group">
                                        <button type="button" class="btn btn-primary" id="apply-filters" onclick="filtrarDados()">Aplicar Filtros</button>
                                    </div>
                                </div>
                            </div>
                        </form>
                        <div class="widget-49">
                            <div class="widget-49-title-wrapper">
                                <div class="widget-49-meeting-info col-sm-12 p-4 d-flex flex-column justify-content-center align-center table-responsive">
                                    <table id="data-table" class="table table-striped table-hover table-bordered table-sm">
                                        <thead>
                                            <tr>
                                                <th scope="col">#</th>
                                                <th scope="col">Pergunta</th>
                                                <th scope="col">Resposta</th>
                                                <th scope="col">Data Criado</th>
                                                <th scope="col">Tipo de Pergunta</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Rows will be added dynamically here -->
                                        </tbody>
                                    </table>
                                    <nav>
                                        <ul class="pagination">
                                            <li class="page-item"><a class="page-link" href="#" id="prev-page">Previous</a></li>
                                            <li class="page-item"><a class="page-link" href="#" id="next-page">Next</a></li>
                                        </ul>
                                    </nav>
                                </div>
                            </div>
                            <div class="form-group">
                                <button id="export-btn" onclick="exportaDados()" class="btn btn-secondary mt-3">Exportar Dados</button>
                            </div>
                        </div>                           
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    async function fetchData(endpoint) {
        try {
            const response = await fetch(endpoint);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        } catch (error) {
            console.error('Fetch error:', error);
            return null;
        }
    }

    async function updateCounters() {
        const totalCount = await fetchData('/api/v1/counter');
        console.log(totalCount)
        if (totalCount) {
            document.getElementById('counter1').innerText = totalCount.rows[0].count;
        }

        const lastMonthCount = await fetchData('/api/v1/lastMonthCounter');
        console.log(lastMonthCount)
        if (lastMonthCount) {
            document.getElementById('counter2').innerText = lastMonthCount.result.rows[0].count;
        }

        const currentMonthCount = await fetchData('/api/v1/currentMonthCounter');
        console.log(currentMonthCount )
        if (currentMonthCount) {
            document.getElementById('counter3').innerText = currentMonthCount.result.rows[0].count;
        }

        const profileCount = await fetchData('/api/v1/profileCounter');
        console.log(profileCount.resultPast.rows[0].count )
        if (profileCount) {
            document.getElementById('profile-counter1').innerText = profileCount.resultPast.rows[0].count;
            document.getElementById('profile-counter2').innerText = profileCount.resultPresent.rows[0].count;
            document.getElementById('profile-counter3').innerText = profileCount.resultFuture.rows[0].count;
            document.getElementById('profile-counter4').innerText = profileCount.resultNull.rows[0].count;
        }
    }

    window.onload = updateCounters;

    // Função para carregar perguntas dinamicamente
    async function loadQuestions() {
        
        const questions = await fetchData('/api/v1/questions');

        const questionSelect = document.getElementById('filter-question');
        questionSelect.innerHTML = '<option value="">Selecione a Pergunta</option>';
        questions.forEach(question => {
            const option = document.createElement('option');
            option.value = question.id;
            option.textContent = question.question;
            questionSelect.appendChild(option);
        });
    }

    // Função para filtrar dados com base nos filtros aplicados
    function filtrarDados() {
        const tableBody = document.querySelector('#data-table tbody');
        tableBody.innerHTML = '';

        const idQuestion = document.getElementById('filter-question').value;
        const dateFrom = document.getElementById('filter-date-from').value;
        const dateTo = document.getElementById('filter-date-to').value;

        const url = new URL(window.location.origin + '/api/v1/filtro');
        const params = { idQuestion, dateFrom, dateTo };


        console.log(params)
        Object.keys(params).forEach(key => {
            if (params[key]) {
                url.searchParams.append(key, params[key]);
            }
        });

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Falha na resposta do servidor');
                }
                return response.json();
            })
            .then(data => {
                displayTableData(data);
            })
            .catch(error => {
                console.error('Erro ao buscar dados:', error);
                alert('Falha ao buscar os dados. Verifique o console para mais detalhes.');
            });
    }

    // Função para exibir os dados na tabela
    function displayTableData(data) {
        const tableBody = document.querySelector('#data-table tbody');
        tableBody.innerHTML = '';

        data.forEach((item, index) => {
            const value = typeof item.value === 'object' ? item.value.value : item.value;

            const row = document.createElement('tr');
            row.innerHTML = `
                <th scope="row">${index + 1}</th>
                <td>${item.question}</td>
                <td>${value}</td>
                <td>${convertTimestampToDateTime(item.createdAt)}</td>
                <td>${item.typeQuestion}</td>
            `;
            tableBody.appendChild(row);
        });
    }
    // Função para exportar os dados exibidos na tabela
    function exportaDados() {
        const tableData = Array.from(document.querySelectorAll('#data-table tbody tr')).map(row => {
            const cells = row.querySelectorAll('td');
            return {
                question: cells[0].textContent,
                value: cells[1].textContent,
                dateCreated: cells[2].textContent,
                typeQuestion: cells[3].textContent
            };
        });

        fetch('/api/v1/exportar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ inputData: { selectedData: { rows: tableData } }})
        })
        .then(response => response.json())
        .then(data => {
            const filterDiv = document.querySelector('.form-group'); // Seleciona a div correta
            console.log(data);
            
            // Cria o link para JSON
            const jsonLink = document.createElement('a');
            jsonLink.setAttribute('href', data.jsonUrl);
            jsonLink.setAttribute('download', 'File.json');
            jsonLink.textContent = 'Export JSON File';
            filterDiv.appendChild(jsonLink); // Adiciona o link ao elemento <div>

            console.log(jsonLink);
            filterDiv.appendChild(document.createElement('br')); // Adiciona uma quebra de linha

            // Cria o link para CSV
            const csvLink = document.createElement('a');
            csvLink.setAttribute('href', data.csvUrl);
            csvLink.setAttribute('download', 'File.csv');
            csvLink.textContent = 'Click to Download';
            filterDiv.appendChild(csvLink); // Adiciona o link ao elemento <div>
        })
        .catch(error => {
            console.error('Erro ao exportar dados:', error); // Loga o erro no console
            alert('Falha ao exportar os dados. Verifique o console para mais detalhes.'); // Exibe um alerta de erro
        });
    }

    function isValidDate(d) {
        return d instanceof Date && !isNaN(d);
    }

    function convertTimestampToDateTime(timestamp) {
        // Converte o timestamp para um objeto Date
        const date = moment.unix(timestamp/1000).format("DD/MM/YYYY");;
    
        console.log(date)
        // Formata a data para uma string legível
        const formattedDate = date;

        return formattedDate;
    }

    // Adiciona event listeners quando o DOM estiver completamente carregado
    document.addEventListener('DOMContentLoaded', () => {
        loadQuestions();

        // Adiciona um event listener para carregar perguntas quando o formulário é selecionado
        document.getElementById('filter-form').addEventListener('change', (e) => {
            loadQuestions(e.target.value);
        });

        // Adiciona um event listener para aplicar filtros quando o botão é clicado
        document.getElementById('apply-filters').addEventListener('click', filtrarDados);

        // Adiciona um event listener para exportar dados quando o botão é clicado
        document.getElementById('export-btn').addEventListener('click', exportaDados);
    });
</script>
